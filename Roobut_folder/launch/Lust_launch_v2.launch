<launch>
    
    <!--roscore
    roslaunch sick_safetyscanners sick_safetyscanners.launch sensor_ip:=192.168.65.213 host_ip:=192.168.65.108      
    -->   
    
    <!-- PARAMETRI -->
    <!-- to so parametri, ki se jih nastavlja z igralnim plosckom ali pa kar direkt tu notri -->
    <!-- nastavi velocity_gain -->
    <param name="/velocity_gain" value="1"/>
    <!-- nastavi insane velocity_gain -->
    <param name="/insane_velocity_gain" value="3.0"/>
    <!-- nastavi stopping distance  (v mm na realni platformi, drugace pa v m)-->
    <param name="/stop_distance" value="250"/>
    <!-- nastavi potreben cas detektirane ovire za prepoznavo konca vrste -->
    <param name="/end_waiting_time" value="10"/>


    <include file="$(find sick_safetyscanners)/launch/sick_safetyscanners.launch" ns="scanner1">
        <arg name="sensor_ip" value="192.168.65.210" />
        <arg name="host_ip" value="192.168.65.57" />
    </include>

    <include file="$(find sick_safetyscanners)/launch/sick_safetyscanners.launch" ns="scanner2">
        <arg name="sensor_ip" value="192.168.65.213" />
        <arg name="host_ip" value="192.168.65.57" />
    </include>

 <!-- #   <include file="$(find ublox_gps)/launch/ublox_device1.launch"/> -->
 
    <!-- Nova funkcionalnost joysticka:
    # A - automatic mode -              mode 0 (pri tem nacinu se platforma NE vrne nazaj, na koncu se ustavi, potem je potrebno pritisniti STOP in BACK; uporabno, če bi želeli na koncu vrste premakniti vision sistem za snemanje nazaj)
    # X - automatic with stopping -     mode 1 (isti pogoj za ustavitev kot pri automatic mode)
    # B - stop - ustavi platformo
    # Y - reset odometry - shrani si trenutno pozicijo robota v self.odoometry_offset
    # START - run fwd       - pozene program voynje naprej glede na mode, priporacam reset odometrije pred START
    # BACK - run back       - pozene program voznje nazaj glede na mode
    # LB - enable
    # RB + LB - override safety
    # left joystick - set velocity
    # cross up/down - set velocity gain (shranjuje se v ROS parameter /velocity_gain, korak je 0.1, max je 1.5; glej joy_2_cmd_vel_v2)
    # cross left/right - set stop distance, nastavi se dolzino premika, shrani se v ROS parameter /stop_distance, korak 100 mm, max 5000 mm
    # RT - reset parameters (gain, distance)
    # LR - insane mode (velocity_gain = 3) - insane mode (hitrost x3), potrebno je drzati gumb LR -->
    <node name="joy_publisher2" pkg="joy" type="joy_node" output="screen">
        <param name="deadzone" type="double" value="0.05"/>
        <param name="coalesce_interval" type="double" value="0.06"/>
        <param name="autorepeat_rate" type="double" value="0.0"/>
        <param name="default_trig_val" type="bool" value="False"/>
    </node>
    
    <!-- <node name="scanner1_data" pkg="nav_mobile" type = "scanner1_safety_out.py" output="screen"/> -->
    <node name="scanner2_data" pkg="nav_mobile" type = "scanner2_safety_out.py" output="screen"/> 

    <!-- Pazi na verzijo skripte (v2 je original) -->
    <node name="joy_to_cmdvel" pkg="nav_mobile" type = "joy_2_cmd_vel_v2.py" output="screen"/>

    <node name="sick_class_pub" pkg="nav_mobile" type = "main_node_class_v3.py" output="screen"/>
    <node name="my_subscriber_xbox" pkg="nav_mobile" type = "parameters_to_beckhoff.py" output="screen"/>
    <node name="data_from_beckhoff" pkg="nav_mobile" type = "data_from_beckhoff.py" output="screen"/>
    <!-- <node name="computerVision_comm" pkg="nav_mobile" type = "computerVision_comm.py" output="screen"/> -->
    
</launch>
